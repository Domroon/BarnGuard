swagger: "2.0"
info:
  description: Here is the full API of this website
  version: "1.0.0"
  title: Barn Guard REST API
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

# Paths supported by the server application
paths:
  /videos:
    get:
      # security:
      #   - Bearer: []
      operationId: "video.read_all"
      tags:
        - Videos
      summary: "The video data structure supported by the server application"
      description: "Read the whole list of videos"
      responses:
        200:
          description: "Successful read all videos list operation"
          schema:
            type: "array"
            items:
              properties:
                date:
                  type: "string"
                thumbnail_photo:
                  type: "string"
                time:
                  type: "string"
                video:
                  type: "string"

    post:
      # security:
      #   - Bearer: []
      operationId: video.create
      tags:
        - Videos
      summary: Create a video and add it to the video list
      description: Create a new video in the video list
      parameters:
        - name: video
          in: body
          description: Video to create
          required: True
          schema:
            type: object
            properties:
              date:
                type: "string"
                description: Date the video was recorded
              thumbnail_photo:
                type: "string"
                description: A scaled down preview image
              time:
                type: "string"
                description: Time at which the video was recorded
              videoname:
                type: "string"
                description: Name of the video
      responses:
        201:
          description: Successfully created video in list

  /videos/{videoname}:
    get:
      # security:
      #   - Bearer: []
      operationId: video.read_one
      tags:
        - Videos
      summary: Read one video from the video list
      description: Read one video from the video list
      parameters:
        - name: videoname
          in: path
          description: Videoname of the video to get from the list
          type: string
          required: True
      responses:
        200:
          description: Successfully read video from video list operation
          schema:
            properties:
              date:
                type: string
              thumbnail_photo:
                type: string
              time:
                type: string
              videoname:
                type: string

    put:
      # security:
      #   - Bearer: []
      operationId: video.update
      tags:
        - Videos
      summary: Update a video in the video list
      description: Update a video in the video list
      parameters:
        - name: videoname
          in: path
          description: Videoname of the video to update in the list
          type: string
          required: True
        - name: video
          in: body
          schema:
            type: object
            properties:
              date:
                type: string
              thumbnail_photo:
                type: string
              time:
                type: string
              videoname:
                type: string
      responses:
        200:
          description: Successfully updated video in people list

    delete:
      # security:
      #   - Bearer: []
      operationId: video.delete
      tags:
        - Videos
      summary: Delete a video from the video list
      description: Delete a video
      parameters:
        - name: videoname
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted a video from video list

  /videos/{date_1}to{date_2}:
    get:
      # security:
      #   - Bearer: []
      operationId: video.search_daterange
      tags:
        - Videos
      summary: Searches videos in a daterange
      description: Searches videos in a daterange from the video list
      parameters:
        - name: date_1
          in: path
          description: Search starts at this date
          type: string
          required: True
        - name: date_2
          in: path
          description: Search ends at this date
          type: string
          required: True
      responses:
        200:
          description: Successfully find videos in this daterange
          schema:
            type: "array"
            items:
              properties:
                date:
                  type: "string"
                thumbnail_photo:
                  type: "string"
                time:
                  type: "string"
                video:
                  type: "string"

  /user:
    get:
      # security:
      #   - Bearer: []
      operationId: "user.read_all"
      tags:
        - User
      summary: "The user data structure supported by the server application"
      description: "Read the whole list of users"
      responses:
        200:
          description: "Successful read all user list operation"
          schema:
            type: "array"
            items:
              properties:
                username:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"

    post:
      # security:
      #   - Bearer: []
      operationId: user.create
      tags:
        - User
      summary: Create a user and add it to the user list
      description: Create a new user in the user list
      parameters:
        - name: user
          in: body
          description: User to create
          required: True
          schema:
            type: object
            properties:
              username:
                type: "string"
                description: Name of the User
              email:
                type: "string"
                description: A Email adress e.g. test@web.de
              password:
                type: "string"
                description: A valid password
      responses:
        201:
          description: Successfully created user in list

  /user/{username}:
    get:
      # security:
      #   - Bearer: []
      operationId: user.read_one
      tags:
        - User
      summary: Read one user from the user list
      description: Read one user from the user list
      parameters:
        - name: username
          in: path
          description: Username of the user to get from the list
          type: string
          required: True
      responses:
        200:
          description: Successfully read user from user list operation
          schema:
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string

    put:
      # security:
      #   - Bearer: []
      operationId: user.update
      tags:
        - User
      summary: Update a user in the user list
      description: Update a user in the user list
      parameters:
        - name: username
          in: path
          description: Username of the user to update in the list
          type: string
          required: True
        - name: user
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Successfully updated user in user list

    delete:
      # security:
      #   - Bearer: []
      operationId: user.delete
      tags:
        - User
      summary: Delete a user from the user list
      description: Delete a user
      parameters:
        - name: username
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted the user from user list

  # /auth/{username}/{password}:
  #   get:
  #     operationId: run.generate_token
  #     tags:
  #       - Token
  #     summary: Create a token and send it to the user
  #     description: Create a new user in the user list
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The User who should get an access token
  #         type: string
  #         required: True
  #       - name: password
  #         in: path
  #         description: Passwort from the User
  #         type: string
  #         required: True
  #     responses:
  #       201:
  #         description: Successfully created a token
  #         schema:
  #           type: "string"
  #           items:
  #             properties:
  #               token:
  #                 type: "string"
